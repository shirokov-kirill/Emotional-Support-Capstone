server {
    listen 80;
    server_name ${DOMAIN_NAME};

    # Redirect HTTP to HTTPS
    return 301 https://$host$request_uri;
}

server {
    listen 443 ssl;
    server_name ${DOMAIN_NAME};

    ssl_certificate /etc/nginx/ssl/${DOMAIN_NAME}.crt; # Path to your SSL certificate
    ssl_certificate_key /etc/nginx/ssl/${DOMAIN_NAME}.key; # Path to your SSL key

    # SSL protocols and ciphers
    ssl_protocols TLSv1.2 TLSv1.3;  # Use TLS 1.2 and TLS 1.3
    ssl_prefer_server_ciphers on;   # Prefer server ciphers over client ciphers
    ssl_ciphers 'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH';

    # SSL session cache
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;

    # Serve the React application
    location / {
        root /usr/share/nginx/html;
        try_files $uri $uri/ /index.html;
    }

    # Proxy API requests to the Backend
    location /api/ {
        proxy_pass http://$server_name:8080/;
        proxy_ssl_verify off;
        proxy_ssl_session_reuse on;

        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # CORS headers
        add_header 'Access-Control-Allow-Origin' $http_origin always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'Origin, X-Requested-With, Content-Type, Accept, Authorization' always;
        if ($request_method = 'OPTIONS') {
            # Tell client that preflight request is accepted
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain; charset=utf-8';
            add_header 'Content-Length' 0;
            return 204;
        }
    }
}
